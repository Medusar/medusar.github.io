<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Medusar's playground]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://medusar.github.io/"/>
  <updated>2016-01-01T11:44:15.000Z</updated>
  <id>https://medusar.github.io/</id>
  
  <author>
    <name><![CDATA[Medusar]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://medusar.github.io/2016/01/01/hello-world/"/>
    <id>https://medusar.github.io/2016/01/01/hello-world/</id>
    <published>2016-01-01T11:44:15.000Z</published>
    <updated>2016-01-01T11:44:15.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ajax跨域请求原理及解决办法]]></title>
    <link href="https://medusar.github.io/2016/01/01/Ajax%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E5%8E%9F%E7%90%86%E5%8F%8A%E8%A7%A3%E5%9B%A7%E5%8A%9E%E6%B3%95/"/>
    <id>https://medusar.github.io/2016/01/01/Ajax跨域请求原理及解囧办法/</id>
    <published>2016-01-01T07:03:08.000Z</published>
    <updated>2016-01-01T12:42:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-__u4EC0_u4E48_u662F_u8DE8_u57DF_uFF08Cross-site_29_uFF1F"><a href="#1-__u4EC0_u4E48_u662F_u8DE8_u57DF_uFF08Cross-site_29_uFF1F" class="headerlink" title="1. 什么是跨域（Cross-site)？"></a>1. 什么是跨域（Cross-site)？</h2><p>想了解跨域，必须先了解一下“同源策略(same origin policy)”。</p>
<h3 id="1-1__u540C_u6E90_u7B56_u7565"><a href="#1-1__u540C_u6E90_u7B56_u7565" class="headerlink" title="1.1 同源策略"></a>1.1 同源策略</h3><p>它限制了某个域下的文档或者js与另一个域中的资源交互的方式，它提供了一种安全机制，这种安全机制可以避免来自恶意网站的攻击。<br>同源策略要求浏览器允许来自某个网页上的js请求来自另一个网页的数据，当且仅当两个页面来自相同的域。</p>
<h3 id="1-2__u4EC0_u4E48_u662F_u57DF_28origin_29_uFF1F"><a href="#1-2__u4EC0_u4E48_u662F_u57DF_28origin_29_uFF1F" class="headerlink" title="1.2 什么是域(origin)？"></a>1.2 什么是域(origin)？</h3><p>域是由三部分组合而成：URI Schema（协议类型），host name（域名）,port number（端口号）<br>举个例子：<br>1） <a href="http://www.domain.com" target="_blank" rel="external">http://www.domain.com</a> 这个页面，URI Schema是http,host name是www.domain.com,port number是默认的80<br>2） <a href="https://www.xxx.com:8080/xxx/yyy" target="_blank" rel="external">https://www.xxx.com:8080/xxx/yyy</a> URI Schema是https，hostname是www.xxx.com，port number是8080<br>由于1）和2）中的三部分都不相同，所以它们就是不同的域。<br>下面的图更好的解释了什么是同域：<br><img src="http://static.zybuluo.com/939958749/11z1efgco1p38598zd9z5g4s/QQ%E5%9B%BE%E7%89%8720151224163925.png" alt="QQ图片20151224163925.png-15.9kB"><br>PS:IE浏览器里可能不太一样，它不会把端口号作为判断依据。   </p>
<h3 id="1-3__u4E3A_u4EC0_u4E48_u8981_u6709_u540C_u6E90_u7B56_u7565_uFF1F"><a href="#1-3__u4E3A_u4EC0_u4E48_u8981_u6709_u540C_u6E90_u7B56_u7565_uFF1F" class="headerlink" title="1.3 为什么要有同源策略？"></a>1.3 为什么要有同源策略？</h3><p>提出同源策略的目的是出于安全性考虑，它能够阻止来自恶意网站的脚本通过其他网站的DOM获取其他网站的信息。可以避免CSRF[^footnote1]和XSS[^footnote2]攻击。   </p>
<h3 id="1-4__u540C_u6E90_u7B56_u7565_u662F_u9650_u5236_u8C01_u7684_uFF1F"><a href="#1-4__u540C_u6E90_u7B56_u7565_u662F_u9650_u5236_u8C01_u7684_uFF1F" class="headerlink" title="1.4 同源策略是限制谁的？"></a>1.4 同源策略是限制谁的？</h3><p>1） 很多人可能搞不清楚这个问题，同源策略限制的是浏览器或者其他提供类似浏览器服务的软件，而且这仅仅是个规范，所以浏览器是否遵守这个规范也不一定，所以就会有上面的IE浏览器判断是否同源的时候并没有考虑端口号的问题。<br>2） 同源策略限制的是js，而图片，css这些是不存在同源策略限制的。   </p>
<h3 id="1-5__u4EC0_u4E48_u662F_u8DE8_u57DF_uFF1F"><a href="#1-5__u4EC0_u4E48_u662F_u8DE8_u57DF_uFF1F" class="headerlink" title="1.5 什么是跨域？"></a>1.5 什么是跨域？</h3><p>在某个网站的页面上通过js请求另外一个网站的数据，如果两个网站不满足同源策略，那么就存在跨域问题。   </p>
<h2 id="2-__u4E3A_u4EC0_u4E48_u4F1A_u6709_u8DE8_u57DF_u95EE_u9898_uFF1F"><a href="#2-__u4E3A_u4EC0_u4E48_u4F1A_u6709_u8DE8_u57DF_u95EE_u9898_uFF1F" class="headerlink" title="2. 为什么会有跨域问题？"></a>2. 为什么会有跨域问题？</h2><p>由于在实际环境中，经常需要通过js获取一些数据，特别是ajax的流行，通过ajax加载某个网站的数据的场景就会经常遇到，而一旦有这样的需求，就可能会出现跨域的问题。   </p>
<h2 id="3-__u5982_u4F55_u5224_u65AD_u6211_u662F_u5426_u9047_u5230_u4E86_u8DE8_u57DF_u95EE_u9898_uFF1F"><a href="#3-__u5982_u4F55_u5224_u65AD_u6211_u662F_u5426_u9047_u5230_u4E86_u8DE8_u57DF_u95EE_u9898_uFF1F" class="headerlink" title="3. 如何判断我是否遇到了跨域问题？"></a>3. 如何判断我是否遇到了跨域问题？</h2><p>一般来讲，如果你的请求被同源策略限制，浏览器的开发工具都会给出错误提示，在Chrome浏览器的console中，可能会有类似下面的提示：<br><img src="http://static.zybuluo.com/939958749/52t678l8q0qe2adct67etjbt/QQ%E6%88%AA%E5%9B%BE20151224171533.png" alt="QQ截图20151224171533.png-110.1kB">   </p>
<h2 id="4-_u5982_u4F55_u89E3_u51B3_u8DE8_u57DF_u95EE_u9898_uFF1F"><a href="#4-_u5982_u4F55_u89E3_u51B3_u8DE8_u57DF_u95EE_u9898_uFF1F" class="headerlink" title="4.如何解决跨域问题？"></a>4.如何解决跨域问题？</h2><p>一般的思路是：通过一些妥协调整，绕过同源策略的限制。下面是我最近了解的一些方法。<br>为方便讲解，这里先举一个例子：<br>客户端采用H5开发，所有的数据都通过ajax请求从服务端获取。<br>客户端的页面都存放在静态文件服务器中，域名是<a href="http://static.demo.com" target="_blank" rel="external">http://static.demo.com</a><br>服务端提供接口供客户端调用，接口的参数和返回值都是JSON格式，服务端的域名是:<a href="http://server.demo.com。" target="_blank" rel="external">http://server.demo.com。</a><br>如果不考虑跨域的问题，客户端与服务端的交互方式如下：<br>1.客户端post请求服务端，参数：｛”key”:”value”｝<br>2.服务端返回结果：{“code”：1，”data”:”success”}   </p>
<h3 id="4-1_Jsonp_u65B9_u5F0F"><a href="#4-1_Jsonp_u65B9_u5F0F" class="headerlink" title="4.1 Jsonp方式"></a>4.1 Jsonp方式</h3><p>原理： 通过在页面中新增一个<code>&lt;script&gt;</code>标签，标签的src指向的是另外一个域的能够提供数据的url，同时将一个本地的callback方法传给服务端，服务端返回的时候将会自动执行callback方法。<br>实现举例：<br>1)服务端修改返回的数据类型为js，同时在请求参数中增加一个callback字段，这个字段用于客户端传递要执行的js方法名称。<br>2）客户端传递的参数中增加callback，同时将普通的ajax方法改成在页面中新增一个<code>&lt;script&gt;</code>节点的方式。<br>具体实现：<br>1.通过js在页面中append如下标签<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"application/javascript"</span></span><br><span class="line">        src=<span class="string">"http://server.demo.com/Users/1234?callback=parseResponse"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>增加该标签之后，浏览器就会立即去请求这个url，由于<code>&lt;script src=&quot;&quot;&gt;</code>方式的是不受同源策略限制的，所以可以避免跨域限制。<br>2.服务端收到callback参数之后，将它拼接在返回的数据中，返回的数据如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseResponse(&#123;<span class="string">"Name"</span>: <span class="string">"Foo"</span>, <span class="string">"Id"</span>: <span class="number">1234</span>, <span class="string">"Rank"</span>: <span class="number">7</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>3.这样返回之后，就调用页面上的parseResponse js方法，就达到了数据处理的目的。<br>4.最后将刚刚新增加到页面中的<code>&lt;script&gt;</code>元素删掉。   </p>
<h3 id="4-2__u8BBE_u7F6Edocument-domain_u5C5E_u6027"><a href="#4-2__u8BBE_u7F6Edocument-domain_u5C5E_u6027" class="headerlink" title="4.2 设置document.domain属性"></a>4.2 设置document.domain属性</h3><p>如果两个页面或者frame可以将document.domain属性设置成相同的值，那么也可以绕过同源策略限制。<br>假设两个页面分别是static.demo.com和server.demo.com，两个页面加载之后都通过js将document.domain设置成demo.com，这样接下来的ajax请求就可以绕过同源策略限制了。<br>但是：如果两个页面存在端口，比如static.demo.com:8080 和 server.demo.com:8090，由于document.domain只能设置域名，所以就不起作用。<br>举例：<br>上面的例子，由于服务端返回的是json,而不是一个页面，所以没法将自己的域名设置成demo.com,但是可以通过另外一种方式，即在服务端增加一个静态页面，页面中放如下js代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain=demo.com</span><br></pre></td></tr></table></figure></p>
<p>然后客户端页面加载的时候先去调用一下这个静态页面就好了。   </p>
<h3 id="4-3_CORS_28Cross-Origin_Resource_Sharing_29"><a href="#4-3_CORS_28Cross-Origin_Resource_Sharing_29" class="headerlink" title="4.3 CORS(Cross-Origin Resource Sharing)"></a>4.3 CORS(Cross-Origin Resource Sharing)</h3><p>原理MDN上讲的更清楚一些，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">点击这里</a>。<br>其实简单来说就是服务端在响应头中添加一个Access-Control-Allow-Origin头部，头部的值为客户端的域名，比如:<a href="http://static.demo.com，这样就可以了。" target="_blank" rel="external">http://static.demo.com，这样就可以了。</a><br>但是需要注意的是:CROS分为两种，一种是简单请求，一种是复杂请求，简单请求按照上面的方式是可以的，如果是复杂请求，浏览器会进行两步，先发一个options请求，这个请求称之为“预请求”，预请求实际上是个OPTIONS请求，类似于一个探测作用，如果服务端返回的头部通过了预请求的内容，则浏览器才会发起第二个真实请求。</p>
<h3 id="4-4__u5BA2_u6237_u7AEF_u8BF7_u6C42_u901A_u8FC7Nginx_u8F6C_u53D1"><a href="#4-4__u5BA2_u6237_u7AEF_u8BF7_u6C42_u901A_u8FC7Nginx_u8F6C_u53D1" class="headerlink" title="4.4 客户端请求通过Nginx转发"></a>4.4 客户端请求通过Nginx转发</h3><p>原理：客户端的所有请求都直接发到客户端所在域名下，但是在客户端服务器增加一台nginx服务器，作为代理，如果是后端的url，直接代理转发到服务端，这样就不存在前端的跨域问题了。<br>举例:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="title">server_name</span>  static.demo.com;    <span class="comment">#可配置多个主机头</span></span><br><span class="line">    <span class="title">charset</span> utf-<span class="number">8</span>,gbk,gb2312,gb18030; <span class="comment">#可以实现多种编码识别</span></span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">root</span>   /home/wy/www/static.demo.com/ROOT;  <span class="comment">#网站文件路径</span></span><br><span class="line"></span><br><span class="line">        <span class="title">autoindex</span> <span class="built_in">on</span>;</span><br><span class="line">        <span class="title">autoindex_exact_size</span> <span class="built_in">off</span>;</span><br><span class="line">        <span class="title">autoindex_localtime</span> <span class="built_in">on</span>;</span><br><span class="line">        <span class="title">index</span>  default.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">##所有/server/开头的请求都会走这里</span></span><br><span class="line">    <span class="title">location</span> /server/ &#123;</span><br><span class="line">            <span class="title">proxy_pass</span> <span class="url">http://server.demo.com:8080</span>;  <span class="comment">##转发到server</span></span><br><span class="line">            <span class="title">proxy_set_header</span>    Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="title">proxy_set_header</span>    X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="title">proxy_set_header</span>    X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-5__u5176_u4ED6_u65B9_u5F0F"><a href="#4-5__u5176_u4ED6_u65B9_u5F0F" class="headerlink" title="4.5 其他方式"></a>4.5 其他方式</h3><p>1）WebSocket<br>2）Cross-document messaging</p>
<p>[参考资料]</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">https://en.wikipedia.org/wiki/Same-origin_policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="external">https://en.wikipedia.org/wiki/Cross-site_request_forgery</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="external">https://en.wikipedia.org/wiki/Cross-site_scripting</a></li>
<li><a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">https://en.wikipedia.org/wiki/JSONP</a></li>
<li><a href="http://www.w3.org/TR/cors/" target="_blank" rel="external">http://www.w3.org/TR/cors/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-__u4EC0_u4E48_u662F_u8DE8_u57DF_uFF08Cross-site_29_uFF1F"><a href="#1-__u4EC0_u4E48_u662F_u8DE8_u57DF_uFF08Cross-site_29_uFF1F" cl]]>
    </summary>
    
      <category term="ajax" scheme="https://medusar.github.io/tags/ajax/"/>
    
      <category term="前端" scheme="https://medusar.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="https://medusar.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="跨域" scheme="https://medusar.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL分区表]]></title>
    <link href="https://medusar.github.io/2016/01/01/MySQL%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
    <id>https://medusar.github.io/2016/01/01/MySQL分区表/</id>
    <published>2016-01-01T06:43:08.000Z</published>
    <updated>2016-01-01T11:42:19.000Z</updated>
    <content type="html"><![CDATA[<p>今天统计数据的时候发现一张表使用了表分区，借此机会记录一下。</p>
<h3 id="1-__u4EC0_u4E48_u662F_u8868_u5206_u533A_uFF1F"><a href="#1-__u4EC0_u4E48_u662F_u8868_u5206_u533A_uFF1F" class="headerlink" title="1. 什么是表分区？"></a>1. 什么是表分区？</h3><p>表分区，是指根据一定规则，将数据库中的一张表分解成多个更小的，容易管理的部分。从逻辑上看，只有一张表，但是底层却是由多个物理分区组成。</p>
<h3 id="2-__u8868_u5206_u533A_u4E0E_u5206_u8868_u7684_u533A_u522B"><a href="#2-__u8868_u5206_u533A_u4E0E_u5206_u8868_u7684_u533A_u522B" class="headerlink" title="2. 表分区与分表的区别"></a>2. 表分区与分表的区别</h3><p>分表：指的是通过一定规则，将一张表分解成多张不同的表。比如将用户订单记录根据时间成多个表。<br>分表与分区的区别在于：分区从逻辑上来讲只有一张表，而分表则是将一张表分解成多张表。</p>
<h3 id="3-__u8868_u5206_u533A_u6709_u4EC0_u4E48_u597D_u5904_uFF1F"><a href="#3-__u8868_u5206_u533A_u6709_u4EC0_u4E48_u597D_u5904_uFF1F" class="headerlink" title="3. 表分区有什么好处？"></a>3. 表分区有什么好处？</h3><p>1）分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备。<br>2）和单个磁盘或者文件系统相比，可以存储更多数据<br>3）优化查询。在where语句中包含分区条件时，可以只扫描一个或多个分区表来提高查询效率；涉及sum和count语句时，也可以在多个分区上并行处理，最后汇总结果。<br>4）分区表更容易维护。例如：想批量删除大量数据可以清除整个分区。<br>5）可以使用分区表来避免某些特殊的瓶颈，例如InnoDB的单个索引的互斥访问，ext3问价你系统的inode锁竞争等。</p>
<h3 id="4-__u5206_u533A_u8868_u7684_u9650_u5236_u56E0_u7D20"><a href="#4-__u5206_u533A_u8868_u7684_u9650_u5236_u56E0_u7D20" class="headerlink" title="4. 分区表的限制因素"></a>4. 分区表的限制因素</h3><p>1）一个表最多只能有1024个分区<br>2） MySQL5.1中，分区表达式必须是整数，或者返回整数的表达式。在MySQL5.5中提供了非整数表达式分区的支持。<br>3）如果分区字段中有主键或者唯一索引的列，那么多有主键列和唯一索引列都必须包含进来。即：分区字段要么不包含主键或者索引列，要么包含全部主键和索引列。<br>4）分区表中无法使用外键约束<br>5）MySQL的分区适用于一个表的所有数据和索引，不能只对表数据分区而不对索引分区，也不能只对索引分区而不对表分区，也不能只对表的一部分数据分区。</p>
<h3 id="5-__u5982_u4F55_u5224_u65AD_u5F53_u524DMySQL_u662F_u5426_u652F_u6301_u5206_u533A_uFF1F"><a href="#5-__u5982_u4F55_u5224_u65AD_u5F53_u524DMySQL_u662F_u5426_u652F_u6301_u5206_u533A_uFF1F" class="headerlink" title="5. 如何判断当前MySQL是否支持分区？"></a>5. 如何判断当前MySQL是否支持分区？</h3><p>命令：<code>show variables like &#39;%partition%&#39;</code>   </p>
<p>运行结果:   </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; show variables like &#39;%partition%&#39;;&#10;+-------------------+-------+&#10;| Variable_name     | Value |&#10;+-------------------+-------+&#10;| have_partitioning | YES   |&#10;+-------------------+-------+&#10;1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>have_partintioning 的值为YES，表示支持分区。</p>
<h3 id="6-_MySQL_u652F_u6301_u7684_u5206_u533A_u7C7B_u578B_u6709_u54EA_u4E9B_uFF1F"><a href="#6-_MySQL_u652F_u6301_u7684_u5206_u533A_u7C7B_u578B_u6709_u54EA_u4E9B_uFF1F" class="headerlink" title="6. MySQL支持的分区类型有哪些？"></a>6. MySQL支持的分区类型有哪些？</h3><p>1）RANGE分区：按照数据的区间范围分区<br>2）LIST分区：按照List中的值分区，与RANGE的区别是，range分区的区间范围值是连续的。<br>3）HASH分区<br>4）KEY分区<br><strong>说明</strong><br>在MySQL5.1版本中，RANGE,LIST,HASH分区要求分区键必须是INT类型，或者通过表达式返回INT类型。但KEY分区的时候，可以使用其他类型的列（BLOB，TEXT类型除外）作为分区键。</p>
<h3 id="7-_Range_u5206_u533A"><a href="#7-_Range_u5206_u533A" class="headerlink" title="7. Range分区"></a>7. Range分区</h3><p>利用取值范围进行分区，区间要连续并且不能互相重叠。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partition by range(exp)( //exp&#21487;&#20197;&#20026;&#21015;&#21517;&#25110;&#32773;&#34920;&#36798;&#24335;&#65292;&#27604;&#22914;to_date(created_date)&#10;    partition p0 values less than(num)&#10;)</span><br></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; create table emp(&#10;    -&#62; id INT NOT null,&#10;    -&#62; store_id int not null&#10;    -&#62; )&#10;    -&#62; partition by range(store_id)(&#10;    -&#62;   partition p0 values less than(10),&#10;    -&#62;   partition p1 values less than(20)&#10;    -&#62; );</span><br></pre></td></tr></table></figure></p>
<p>上面的语句创建了emp表，并根据store_id字段进行分区，小于10的值存在分区p0中，大于等于10，小于20的值存在分区p1中。<br><strong>注意</strong><br>每个分区都是按顺序定义的，从最低到最高。上面的语句，如果将less than(10) 和less than (20)的顺序颠倒过来，那么将报错，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1493 (HY000): VALUES LESS THAN value must be strictly increasing for each partition</span><br></pre></td></tr></table></figure></p>
<p><strong>RANGE分区存在的问题</strong></p>
<ol>
<li>range范围覆盖问题：当插入的记录中对应的分区键的值不在分区定义的范围中的时候，插入语句会失败。<br>上面的例子，如果我插入一条store_id = 30的记录会怎么样呢？<br>我们上面分区的时候，最大值是20，如果插入一条超过20的记录，会报错:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; insert into emp(id,store_id) values(2,30);&#10;ERROR 1526 (HY000): Table has no partition for value 30</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>提示30这个值没有对应的分区。<br><strong>解决办法</strong><br>A. 预估分区键的值，及时新增分区。<br>B. 设置分区的时候，使用<code>values less than maxvalue</code> 子句,MAXVALUE表示最大的可能的整数值。<br>C. 尽量选择能够全部覆盖的字段作为分区键，比如一年的十二个月等。</p>
<ol>
<li>Range分区中，分区键的值如果是NULL，将被作为一个最小值来处理。</li>
</ol>
<h3 id="8-_LIST_u5206_u533A"><a href="#8-_LIST_u5206_u533A" class="headerlink" title="8. LIST分区"></a>8. LIST分区</h3><p>List分区是建立离散的值列表告诉数据库特定的值属于哪个分区。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partition by list(exp)( //exp&#20026;&#21015;&#21517;&#25110;&#32773;&#34920;&#36798;&#24335;&#10;    partition p0 values in (3,5)  //&#20540;&#20026;3&#21644;5&#30340;&#22312;p0&#20998;&#21306;&#10;)</span><br></pre></td></tr></table></figure></p>
<p>与Range不同的是，list分区不必生命任何特定的顺序。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; create table emp1(&#10;    -&#62; id int not null,&#10;    -&#62; store_id int not null&#10;    -&#62; )&#10;    -&#62; partition by list(store_id)(&#10;    -&#62;   partition p0 values in (3,5),&#10;    -&#62;   partition p1 values in (2,6,7,9)&#10;    -&#62; );</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong><br>如果插入的记录对应的分区键的值不在list分区指定的值中，将会插入失败。并且，list不能像range分区那样提供maxvalue。</p>
<h3 id="9-_Columns_u5206_u533A"><a href="#9-_Columns_u5206_u533A" class="headerlink" title="9. Columns分区"></a>9. Columns分区</h3><p>MySQL5.5中引入的分区类型，解决了5.5版本之前range分区和list分区只支持整数分区的问题。<br>Columns分区可以细分为 range columns分区和 list columns分区，他们都支持整数，日期时间，字符串三大数据类型。（不支持text和blob类型作为分区键）<br>columns分区还支持多列分区（这里不详细展开）。</p>
<h3 id="10-_Hash_u5206_u533A"><a href="#10-_Hash_u5206_u533A" class="headerlink" title="10. Hash分区"></a>10. Hash分区</h3><p>Hash分区主要用来分散热点读，确保数据在预先确定个数的分区中尽可能平均分布。<br>MySQL支持两种Hash分区:常规Hash分区和线性Hash分区。<br>A. 常规Hash分区:使用取模算法<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partition by hash(store_id) partitions 4;</span><br></pre></td></tr></table></figure></p>
<p>上面的语句，根据store_id对4取模，决定记录存储位置。<br>比如store_id = 234的记录，MOD(234,4)=2,所以会被存储在第二个分区。</p>
<p><strong>常规Hash分区的优点和不足</strong><br>优点：能够使数据尽可能的均匀分布。<br>缺点：不适合分区经常变动的需求。假如我要新增加两个分区，现在有6个分区，那么MOD(234,6)的结果与之前MOD(234,4)的结果就会出现不一致，这样大部分数据就需要重新计算分区。为解决此问题，MySQL提供了线性Hash分区。</p>
<p>B. 线性Hash分区：分区函数是一个线性的2的幂的运算法则。<br>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partition by LINER hash(store_id) partitions 4;</span><br></pre></td></tr></table></figure></p>
<p>与常规Hash的不同在于，“Liner”关键字。<br>算法介绍:<br>假设要保存记录的分区编号为N,num为一个非负整数,表示分割成的分区的数量，那么N可以通过以下步骤得到：<br>Step 1. 找到一个大于等于num的2的幂，这个值为V，V可以通过下面公式得到：<br>V = Power(2,Ceiling(Log(2,num)))<br>例如：刚才设置了4个分区，num=4，Log(2,4)=2,Ceiling(2)=2,power(2,2)=4,即V=4<br>Step 2. 设置N=F(column_list)&amp;(V-1)<br>例如：刚才V=4，store_id=234对应的N值，N = 234&amp;（4-1） =2<br>Step 3. 当N&gt;=num,设置V=Ceiling(V/2),N=N&amp;(V-1)<br>例如：store_id=234,N=2&lt;4,所以N就取值2，即可。<br>假设上面算出来的N=5，那么V=Ceiling(2.5)=3,N=234&amp;(3-1)=1,即在第一个分区。</p>
<p><strong>线性Hash的优点和不足</strong><br>优点：在分区维护（增加，删除，合并，拆分分区）时，MySQL能够处理得更加迅速。<br>缺点：与常规Hash分区相比，线性Hash各个分区之间的数据分布不太均衡。</p>
<h3 id="11-_Key_u5206_u533A"><a href="#11-_Key_u5206_u533A" class="headerlink" title="11. Key分区"></a>11. Key分区</h3><p>类似Hash分区，Hash分区允许使用用户自定义的表达式，但Key分区不允许使用用户自定义的表达式。Hash仅支持整数分区，而Key分区支持除了Blob和text的其他类型的列作为分区键。<br>语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partition by key(exp) partitions 4;//exp&#26159;&#38646;&#20010;&#25110;&#22810;&#20010;&#23383;&#27573;&#21517;&#30340;&#21015;&#34920;</span><br></pre></td></tr></table></figure></p>
<p>key分区的时候，exp可以为空，如果为空，则默认使用主键作为分区键，没有主键的时候，会选择非空惟一键作为分区键。</p>
<h3 id="12-__u5B50_u5206_u533A"><a href="#12-__u5B50_u5206_u533A" class="headerlink" title="12. 子分区"></a>12. 子分区</h3><p>分区表中对每个分区再次分割，又成为复合分区。</p>
<h3 id="13-__u5206_u533A_u5BF9_u4E8ENULL_u503C_u7684_u5904_u7406"><a href="#13-__u5206_u533A_u5BF9_u4E8ENULL_u503C_u7684_u5904_u7406" class="headerlink" title="13. 分区对于NULL值的处理"></a>13. 分区对于NULL值的处理</h3><p>MySQ允许分区键值为NULL，分区键可能是一个字段或者一个用户定义的表达式。一般情况下，MySQL在分区的时候会把NULL值当作零值或者一个最小值进行处理。<br><strong>注意</strong><br>Range分区中：NULL值被当作最小值来处理<br>List分区中：NULL值必须出现在列表中，否则不被接受<br>Hash/Key分区中：NULL值会被当作零值来处理   </p>
<h3 id="14-__u5206_u533A_u7BA1_u7406"><a href="#14-__u5206_u533A_u7BA1_u7406" class="headerlink" title="14. 分区管理"></a>14. 分区管理</h3><p>分区管理包括对于分区的增加，删除，以及查询。   </p>
<ol>
<li>增加分区：<br>对于Range分区和LIst分区来说：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name add partition (partition p0 values ...(exp))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>values后面的内容根据分区的类型不同而不同。<br>对于Hash分区和Key分区来说：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name add partition partitions 8;</span><br></pre></td></tr></table></figure></p>
<p>上面的语句，指的是新增8个分区 。   </p>
<ol>
<li>删除分区<br>对于Range分区和List分区：   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name drop partition p0; //p0&#20026;&#35201;&#21024;&#38500;&#30340;&#20998;&#21306;&#21517;&#31216;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>删除了分区，同时也将删除该分区中的所有数据。同时，如果删除了分区导致分区不能覆盖所有值，那么插入数据的时候会报错。<br>对于Hash和Key分区：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name coalesce partition 2; //&#23558;&#20998;&#21306;&#32553;&#20943;&#21040;2&#20010;</span><br></pre></td></tr></table></figure></p>
<p>coalesce [ˌkəʊəˈles] vi. 联合，合并   </p>
<ol>
<li>分区查询<br>1）查询某张表一共有多少个分区   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; select&#10;    -&#62;   partition_name,&#10;    -&#62;   partition_expression,&#10;    -&#62;   partition_description,&#10;    -&#62;   table_rows&#10;    -&#62; from&#10;    -&#62;   INFORMATION_SCHEMA.partitions&#10;    -&#62; where&#10;    -&#62;   table_schema=&#39;test&#39;&#10;    -&#62;   and table_name = &#39;emp&#39;;&#10;+----------------+----------------------+-----------------------+------------+&#10;| partition_name | partition_expression | partition_description | table_rows |&#10;+----------------+----------------------+-----------------------+------------+&#10;| p0             | store_id             | 10                    |          0 |&#10;| p1             | store_id             | 20                    |          1 |&#10;+----------------+----------------------+-----------------------+------------+</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>即，可以从information_schema.partitions表中查询。<br>2）查看执行计划，判断查询数据是否进行了分区过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&#62; explain partitions select * from emp where store_id=10 \G;&#10;*************************** 1. row ***************************&#10;           id: 1&#10;  select_type: SIMPLE&#10;        table: emp&#10;   partitions: p1&#10;         type: system&#10;possible_keys: NULL&#10;          key: NULL&#10;      key_len: NULL&#10;          ref: NULL&#10;         rows: 1&#10;        Extra:&#10;1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>上面的结果：partitions:p1 表示数据在p1分区进行检索。   </p>
<p>[参考资料]<br>《深入MySQL数据库开发、优化与管理维护（第2版）》<br>《高性能MySQL》   </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天统计数据的时候发现一张表使用了表分区，借此机会记录一下。</p>
<h3 id="1-__u4EC0_u4E48_u662F_u8868_u5206_u533A_uFF1F"><a href="#1-__u4EC0_u4E48_u662F_u8868_u5206_u53]]>
    </summary>
    
      <category term="MySQL" scheme="https://medusar.github.io/tags/MySQL/"/>
    
      <category term="分区" scheme="https://medusar.github.io/tags/%E5%88%86%E5%8C%BA/"/>
    
  </entry>
  
</feed>
